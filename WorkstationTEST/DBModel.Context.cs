//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     對這個檔案進行手動變更可能導致您的應用程式產生未預期的行為。
//     如果重新產生程式碼，將會覆寫對這個檔案的手動變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkstationTEST
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MISDataEntities : DbContext
    {
        public MISDataEntities() : base("name=MISDataEntities")

        {
           


        }
        public MISDataEntities(string connectionstring ) : base(  connectionstring )

        {
          //  this.Database.Connection.ConnectionString = connectionstring;


        }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C_ParameterValueFinance> C_ParameterValueFinance { get; set; }
        public virtual DbSet<C_ParameterValueInvoicing> C_ParameterValueInvoicing { get; set; }
        public virtual DbSet<C_ParameterValueProduce> C_ParameterValueProduce { get; set; }
        public virtual DbSet<C_TransactionDoc> C_TransactionDoc { get; set; }
        public virtual DbSet<C_TransactionItems> C_TransactionItems { get; set; }
        public virtual DbSet<AC_Account> AC_Account { get; set; }
        public virtual DbSet<AC_Voucher> AC_Voucher { get; set; }
        public virtual DbSet<AC_VoucherItems> AC_VoucherItems { get; set; }
        public virtual DbSet<AccuracyScrewsRoller> AccuracyScrewsRoller { get; set; }
        public virtual DbSet<AccuracySize> AccuracySize { get; set; }
        public virtual DbSet<AccuracyTap> AccuracyTap { get; set; }
        public virtual DbSet<AccuracyThreadGauge> AccuracyThreadGauge { get; set; }
        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<AddressSet> AddressSet { get; set; }
        public virtual DbSet<AppAuthorize> AppAuthorize { get; set; }
        public virtual DbSet<Applications> Applications { get; set; }
        public virtual DbSet<Assembly> Assembly { get; set; }
        public virtual DbSet<AssemblyItems> AssemblyItems { get; set; }
        public virtual DbSet<Assets> Assets { get; set; }
        public virtual DbSet<AssetsCategory> AssetsCategory { get; set; }
        public virtual DbSet<AssetsItems> AssetsItems { get; set; }
        public virtual DbSet<BadDebtCod> BadDebtCod { get; set; }
        public virtual DbSet<Bank> Bank { get; set; }
        public virtual DbSet<BankAccount> BankAccount { get; set; }
        public virtual DbSet<Bankbook> Bankbook { get; set; }
        public virtual DbSet<BankbookCategory> BankbookCategory { get; set; }
        public virtual DbSet<BankBookLog> BankBookLog { get; set; }
        public virtual DbSet<BOMFrameItems> BOMFrameItems { get; set; }
        public virtual DbSet<BOMFrames> BOMFrames { get; set; }
        public virtual DbSet<BOMItems> BOMItems { get; set; }
        public virtual DbSet<BOMReplaces> BOMReplaces { get; set; }
        public virtual DbSet<BOMs> BOMs { get; set; }
        public virtual DbSet<CallIns> CallIns { get; set; }
        public virtual DbSet<CheckReportForms> CheckReportForms { get; set; }
        public virtual DbSet<CInvoiceItems> CInvoiceItems { get; set; }
        public virtual DbSet<CInvoices> CInvoices { get; set; }
        public virtual DbSet<ClassTypes> ClassTypes { get; set; }
        public virtual DbSet<ComeinChkYM> ComeinChkYM { get; set; }
        public virtual DbSet<ComeinItems> ComeinItems { get; set; }
        public virtual DbSet<Comeins> Comeins { get; set; }
        public virtual DbSet<CommonWords> CommonWords { get; set; }
        public virtual DbSet<ControllerCollate> ControllerCollate { get; set; }
        public virtual DbSet<CostSets> CostSets { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<CurrencyDecs> CurrencyDecs { get; set; }
        public virtual DbSet<CurrencyExchangRate> CurrencyExchangRate { get; set; }
        public virtual DbSet<CustomerApply> CustomerApply { get; set; }
        public virtual DbSet<CustomerPhoneNumber> CustomerPhoneNumber { get; set; }
        public virtual DbSet<CustomGrade> CustomGrade { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<DesignClassify> DesignClassify { get; set; }
        public virtual DbSet<DesignFigures> DesignFigures { get; set; }
        public virtual DbSet<EmployeeEducation> EmployeeEducation { get; set; }
        public virtual DbSet<EmployeeFamilyMember> EmployeeFamilyMember { get; set; }
        public virtual DbSet<EmployeeJobHistory> EmployeeJobHistory { get; set; }
        public virtual DbSet<EmployeeLanguage> EmployeeLanguage { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<EmployeeSalaryAdjusts> EmployeeSalaryAdjusts { get; set; }
        public virtual DbSet<EmployeeSalaryCalculateSet> EmployeeSalaryCalculateSet { get; set; }
        public virtual DbSet<EmployeeSalaryClassifys> EmployeeSalaryClassifys { get; set; }
        public virtual DbSet<EmployeeSalaryDetails> EmployeeSalaryDetails { get; set; }
        public virtual DbSet<EmployeeSalaryItemSet> EmployeeSalaryItemSet { get; set; }
        public virtual DbSet<EmployeeSalaryParameters> EmployeeSalaryParameters { get; set; }
        public virtual DbSet<EmployeeSalarys> EmployeeSalarys { get; set; }
        public virtual DbSet<EmployeeSalaryTitleSet> EmployeeSalaryTitleSet { get; set; }
        public virtual DbSet<EmployeeSkill> EmployeeSkill { get; set; }
        public virtual DbSet<EncodingCategory> EncodingCategory { get; set; }
        public virtual DbSet<EncodingItemValues> EncodingItemValues { get; set; }
        public virtual DbSet<EncodingRuleItems> EncodingRuleItems { get; set; }
        public virtual DbSet<EncodingRules> EncodingRules { get; set; }
        public virtual DbSet<EquipmentKanban> EquipmentKanban { get; set; }
        public virtual DbSet<EquipmentSetting> EquipmentSetting { get; set; }
        public virtual DbSet<Evaluate> Evaluate { get; set; }
        public virtual DbSet<EvaluateFigures> EvaluateFigures { get; set; }
        public virtual DbSet<EvaluateParameter> EvaluateParameter { get; set; }
        public virtual DbSet<EvaluateSA> EvaluateSA { get; set; }
        public virtual DbSet<EvaluateSurface> EvaluateSurface { get; set; }
        public virtual DbSet<EvaluateTapShape> EvaluateTapShape { get; set; }
        public virtual DbSet<Forum> Forum { get; set; }
        public virtual DbSet<ImageStores> ImageStores { get; set; }
        public virtual DbSet<InOrderItems> InOrderItems { get; set; }
        public virtual DbSet<InOrders> InOrders { get; set; }
        public virtual DbSet<InventoryItems> InventoryItems { get; set; }
        public virtual DbSet<Inventorys> Inventorys { get; set; }
        public virtual DbSet<InvoiceItems> InvoiceItems { get; set; }
        public virtual DbSet<Invoices> Invoices { get; set; }
        public virtual DbSet<InvoiceSets> InvoiceSets { get; set; }
        public virtual DbSet<Iso1502_Table4> Iso1502_Table4 { get; set; }
        public virtual DbSet<Iso1502_Table5> Iso1502_Table5 { get; set; }
        public virtual DbSet<Iso965_1_Table1> Iso965_1_Table1 { get; set; }
        public virtual DbSet<Iso965_1_Table5> Iso965_1_Table5 { get; set; }
        public virtual DbSet<Iso965_1_Table6> Iso965_1_Table6 { get; set; }
        public virtual DbSet<IsoVoucherItems> IsoVoucherItems { get; set; }
        public virtual DbSet<IsoVouchers> IsoVouchers { get; set; }
        public virtual DbSet<MeasuredPaper> MeasuredPaper { get; set; }
        public virtual DbSet<MeasuredPaperSet> MeasuredPaperSet { get; set; }
        public virtual DbSet<MeasuredValue> MeasuredValue { get; set; }
        public virtual DbSet<MemberApply> MemberApply { get; set; }
        public virtual DbSet<Membership> Membership { get; set; }
        public virtual DbSet<NoBuild> NoBuild { get; set; }
        public virtual DbSet<NoBuildItems> NoBuildItems { get; set; }
        public virtual DbSet<OAuthMembership> OAuthMembership { get; set; }
        public virtual DbSet<OrderItems> OrderItems { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Organization> Organization { get; set; }
        public virtual DbSet<OutsideBackItems> OutsideBackItems { get; set; }
        public virtual DbSet<OutsideBacks> OutsideBacks { get; set; }
        public virtual DbSet<OutsideProcessingItems> OutsideProcessingItems { get; set; }
        public virtual DbSet<OutsideProcessings> OutsideProcessings { get; set; }
        public virtual DbSet<ParameterNotes> ParameterNotes { get; set; }
        public virtual DbSet<ParameterSet> ParameterSet { get; set; }
        public virtual DbSet<PartnerCategory> PartnerCategory { get; set; }
        public virtual DbSet<PartnerContact> PartnerContact { get; set; }
        public virtual DbSet<Partners> Partners { get; set; }
        public virtual DbSet<PartnersBadDebt> PartnersBadDebt { get; set; }
        public virtual DbSet<Partnership> Partnership { get; set; }
        public virtual DbSet<Payments> Payments { get; set; }
        public virtual DbSet<Persons> Persons { get; set; }
        public virtual DbSet<ProductCategorys> ProductCategorys { get; set; }
        public virtual DbSet<ProductDesign3Pins> ProductDesign3Pins { get; set; }
        public virtual DbSet<ProductDesignFigures> ProductDesignFigures { get; set; }
        public virtual DbSet<ProductDesignGearSets> ProductDesignGearSets { get; set; }
        public virtual DbSet<ProductDesignLogs> ProductDesignLogs { get; set; }
        public virtual DbSet<ProductDesigns> ProductDesigns { get; set; }
        public virtual DbSet<ProductDesignsHandleSets> ProductDesignsHandleSets { get; set; }
        public virtual DbSet<ProductImages> ProductImages { get; set; }
        public virtual DbSet<ProductNameRefers> ProductNameRefers { get; set; }
        public virtual DbSet<ProductPrices> ProductPrices { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<ProductStore> ProductStore { get; set; }
        public virtual DbSet<ProductStoreBatchNumberList> ProductStoreBatchNumberList { get; set; }
        public virtual DbSet<ProductStoreBatchNumbers> ProductStoreBatchNumbers { get; set; }
        public virtual DbSet<ProductStoreItem> ProductStoreItem { get; set; }
        public virtual DbSet<ProductStoreItemList> ProductStoreItemList { get; set; }
        public virtual DbSet<PurchaseItems> PurchaseItems { get; set; }
        public virtual DbSet<Purchases> Purchases { get; set; }
        public virtual DbSet<QCStandardItems> QCStandardItems { get; set; }
        public virtual DbSet<QCStandards> QCStandards { get; set; }
        public virtual DbSet<QuotationItems> QuotationItems { get; set; }
        public virtual DbSet<Quotations> Quotations { get; set; }
        public virtual DbSet<ReceivePayment> ReceivePayment { get; set; }
        public virtual DbSet<RequisitionItems> RequisitionItems { get; set; }
        public virtual DbSet<Requisitions> Requisitions { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<SaleChkDefYM> SaleChkDefYM { get; set; }
        public virtual DbSet<SaleChkYM> SaleChkYM { get; set; }
        public virtual DbSet<SaleItems> SaleItems { get; set; }
        public virtual DbSet<Sales> Sales { get; set; }
        public virtual DbSet<SalesCheckout> SalesCheckout { get; set; }
        public virtual DbSet<Salesman> Salesman { get; set; }
        public virtual DbSet<SentCarItems> SentCarItems { get; set; }
        public virtual DbSet<SentCars> SentCars { get; set; }
        public virtual DbSet<ShareFiles> ShareFiles { get; set; }
        public virtual DbSet<SheetTail> SheetTail { get; set; }
        public virtual DbSet<StandardSet> StandardSet { get; set; }
        public virtual DbSet<Storehouse> Storehouse { get; set; }
        public virtual DbSet<StoreSpace> StoreSpace { get; set; }
        public virtual DbSet<SupplierCategory> SupplierCategory { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TaxType> TaxType { get; set; }
        public virtual DbSet<Tenants> Tenants { get; set; }
        public virtual DbSet<TestData> TestData { get; set; }
        public virtual DbSet<Todo> Todo { get; set; }
        public virtual DbSet<UnitSet> UnitSet { get; set; }
        public virtual DbSet<UserActivityLog> UserActivityLog { get; set; }
        public virtual DbSet<UserActivityTime> UserActivityTime { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<VoucherType> VoucherType { get; set; }
        public virtual DbSet<WebNews> WebNews { get; set; }
        public virtual DbSet<WorkCheckItems> WorkCheckItems { get; set; }
        public virtual DbSet<WorkDayBadItems> WorkDayBadItems { get; set; }
        public virtual DbSet<WorkDayReports> WorkDayReports { get; set; }
        public virtual DbSet<WorkflowItems> WorkflowItems { get; set; }
        public virtual DbSet<Workflows> Workflows { get; set; }
        public virtual DbSet<WorkInFactory> WorkInFactory { get; set; }
        public virtual DbSet<WorkItems> WorkItems { get; set; }
        public virtual DbSet<WorkOrderItems> WorkOrderItems { get; set; }
        public virtual DbSet<WorkOrders> WorkOrders { get; set; }
        public virtual DbSet<WorkProgress> WorkProgress { get; set; }
        public virtual DbSet<C_Assets> C_Assets { get; set; }
        public virtual DbSet<C_AssetsChk> C_AssetsChk { get; set; }
        public virtual DbSet<C_ChgCustomer> C_ChgCustomer { get; set; }
        public virtual DbSet<C_Cust> C_Cust { get; set; }
        public virtual DbSet<C_InventoryBak> C_InventoryBak { get; set; }
        public virtual DbSet<C_InventoryItems> C_InventoryItems { get; set; }
        public virtual DbSet<C_Inventorys> C_Inventorys { get; set; }
        public virtual DbSet<C_ProductStore> C_ProductStore { get; set; }
        public virtual DbSet<C_ProductStoreItem> C_ProductStoreItem { get; set; }
        public virtual DbSet<C_ReportTempItems> C_ReportTempItems { get; set; }
        public virtual DbSet<C_ReportTemps> C_ReportTemps { get; set; }
        public virtual DbSet<EquipmentOutput> EquipmentOutput { get; set; }
        public virtual DbSet<IsoBadReason> IsoBadReason { get; set; }
        public virtual DbSet<ProductDesignFieldNote> ProductDesignFieldNote { get; set; }
        public virtual DbSet<SetBPS> SetBPS { get; set; }
        public virtual DbSet<VoucherTypes> VoucherTypes { get; set; }
        public virtual DbSet<View_Address> View_Address { get; set; }
        public virtual DbSet<View_Assets> View_Assets { get; set; }
        public virtual DbSet<View_AssetsItems> View_AssetsItems { get; set; }
        public virtual DbSet<View_OrderItemAddress> View_OrderItemAddress { get; set; }
        public virtual DbSet<View_Products> View_Products { get; set; }
        public virtual DbSet<View_ProductStoreItems> View_ProductStoreItems { get; set; }
        public virtual DbSet<View_Sale_RPT_SaleDate> View_Sale_RPT_SaleDate { get; set; }
        public virtual DbSet<View_使用者角色表> View_使用者角色表 { get; set; }
        public virtual DbSet<View_使用者表> View_使用者表 { get; set; }
        public virtual DbSet<VRP_Sales> VRP_Sales { get; set; }
    
        [DbFunction("MISDataEntities", "F_GetQuotationOrderData")]
        public virtual IQueryable<F_GetQuotationOrderData_Result> F_GetQuotationOrderData(Nullable<int> tenantKey, Nullable<int> startValue, Nullable<int> endValue, Nullable<int> qtType, Nullable<int> odType)
        {
            var tenantKeyParameter = tenantKey.HasValue ?
                new ObjectParameter("TenantKey", tenantKey) :
                new ObjectParameter("TenantKey", typeof(int));
    
            var startValueParameter = startValue.HasValue ?
                new ObjectParameter("StartValue", startValue) :
                new ObjectParameter("StartValue", typeof(int));
    
            var endValueParameter = endValue.HasValue ?
                new ObjectParameter("EndValue", endValue) :
                new ObjectParameter("EndValue", typeof(int));
    
            var qtTypeParameter = qtType.HasValue ?
                new ObjectParameter("QtType", qtType) :
                new ObjectParameter("QtType", typeof(int));
    
            var odTypeParameter = odType.HasValue ?
                new ObjectParameter("OdType", odType) :
                new ObjectParameter("OdType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_GetQuotationOrderData_Result>("[MISDataEntities].[F_GetQuotationOrderData](@TenantKey, @StartValue, @EndValue, @QtType, @OdType)", tenantKeyParameter, startValueParameter, endValueParameter, qtTypeParameter, odTypeParameter);
        }
    
        public virtual int B_ProductStoreItemList(Nullable<System.Guid> idKey1, Nullable<System.Guid> idKey2, string x_IUD)
        {
            var idKey1Parameter = idKey1.HasValue ?
                new ObjectParameter("IdKey1", idKey1) :
                new ObjectParameter("IdKey1", typeof(System.Guid));
    
            var idKey2Parameter = idKey2.HasValue ?
                new ObjectParameter("IdKey2", idKey2) :
                new ObjectParameter("IdKey2", typeof(System.Guid));
    
            var x_IUDParameter = x_IUD != null ?
                new ObjectParameter("X_IUD", x_IUD) :
                new ObjectParameter("X_IUD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("B_ProductStoreItemList", idKey1Parameter, idKey2Parameter, x_IUDParameter);
        }
    
        public virtual int B_SaleToProductStore()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("B_SaleToProductStore");
        }
    
        public virtual int B_SaleToProductStore_UPD(Nullable<System.Guid> idKeySaleId, Nullable<System.Guid> idKey_SaleItemId, string x_IUD, Nullable<decimal> updateQty)
        {
            var idKeySaleIdParameter = idKeySaleId.HasValue ?
                new ObjectParameter("IdKeySaleId", idKeySaleId) :
                new ObjectParameter("IdKeySaleId", typeof(System.Guid));
    
            var idKey_SaleItemIdParameter = idKey_SaleItemId.HasValue ?
                new ObjectParameter("IdKey_SaleItemId", idKey_SaleItemId) :
                new ObjectParameter("IdKey_SaleItemId", typeof(System.Guid));
    
            var x_IUDParameter = x_IUD != null ?
                new ObjectParameter("X_IUD", x_IUD) :
                new ObjectParameter("X_IUD", typeof(string));
    
            var updateQtyParameter = updateQty.HasValue ?
                new ObjectParameter("UpdateQty", updateQty) :
                new ObjectParameter("UpdateQty", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("B_SaleToProductStore_UPD", idKeySaleIdParameter, idKey_SaleItemIdParameter, x_IUDParameter, updateQtyParameter);
        }
    
        public virtual ObjectResult<string> BAddressPrint(Nullable<System.Guid> addressId)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BAddressPrint", addressIdParameter);
        }
    
        public virtual int P_AssetsAutoInsert(Nullable<int> tenantId, ObjectParameter assetsId, string assetsNo, string assetsName, string specification, string stockUnit, string accuracy, Nullable<decimal> listPrice, string material, Nullable<System.Guid> partnerId, Nullable<System.Guid> assetsCategoryId, Nullable<System.Guid> workFigureId, ObjectParameter insertStatus)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var assetsNoParameter = assetsNo != null ?
                new ObjectParameter("AssetsNo", assetsNo) :
                new ObjectParameter("AssetsNo", typeof(string));
    
            var assetsNameParameter = assetsName != null ?
                new ObjectParameter("AssetsName", assetsName) :
                new ObjectParameter("AssetsName", typeof(string));
    
            var specificationParameter = specification != null ?
                new ObjectParameter("Specification", specification) :
                new ObjectParameter("Specification", typeof(string));
    
            var stockUnitParameter = stockUnit != null ?
                new ObjectParameter("StockUnit", stockUnit) :
                new ObjectParameter("StockUnit", typeof(string));
    
            var accuracyParameter = accuracy != null ?
                new ObjectParameter("Accuracy", accuracy) :
                new ObjectParameter("Accuracy", typeof(string));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var materialParameter = material != null ?
                new ObjectParameter("Material", material) :
                new ObjectParameter("Material", typeof(string));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(System.Guid));
    
            var assetsCategoryIdParameter = assetsCategoryId.HasValue ?
                new ObjectParameter("AssetsCategoryId", assetsCategoryId) :
                new ObjectParameter("AssetsCategoryId", typeof(System.Guid));
    
            var workFigureIdParameter = workFigureId.HasValue ?
                new ObjectParameter("WorkFigureId", workFigureId) :
                new ObjectParameter("WorkFigureId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_AssetsAutoInsert", tenantIdParameter, assetsId, assetsNoParameter, assetsNameParameter, specificationParameter, stockUnitParameter, accuracyParameter, listPriceParameter, materialParameter, partnerIdParameter, assetsCategoryIdParameter, workFigureIdParameter, insertStatus);
        }
    
        public virtual int P_AssetsDeleteAll(Nullable<System.Guid> assetsIdKey)
        {
            var assetsIdKeyParameter = assetsIdKey.HasValue ?
                new ObjectParameter("AssetsIdKey", assetsIdKey) :
                new ObjectParameter("AssetsIdKey", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_AssetsDeleteAll", assetsIdKeyParameter);
        }
    
        public virtual int P_BACKUPDATA()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_BACKUPDATA");
        }
    
        public virtual int P_BankAccount_Update(Nullable<int> tenantId, Nullable<System.Guid> bankAccountId, string referType)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var bankAccountIdParameter = bankAccountId.HasValue ?
                new ObjectParameter("BankAccountId", bankAccountId) :
                new ObjectParameter("BankAccountId", typeof(System.Guid));
    
            var referTypeParameter = referType != null ?
                new ObjectParameter("ReferType", referType) :
                new ObjectParameter("ReferType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_BankAccount_Update", tenantIdParameter, bankAccountIdParameter, referTypeParameter);
        }
    
        public virtual int P_Bankbook_Update(Nullable<System.Guid> idKey, string referType, string x_IUD)
        {
            var idKeyParameter = idKey.HasValue ?
                new ObjectParameter("IdKey", idKey) :
                new ObjectParameter("IdKey", typeof(System.Guid));
    
            var referTypeParameter = referType != null ?
                new ObjectParameter("ReferType", referType) :
                new ObjectParameter("ReferType", typeof(string));
    
            var x_IUDParameter = x_IUD != null ?
                new ObjectParameter("X_IUD", x_IUD) :
                new ObjectParameter("X_IUD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Bankbook_Update", idKeyParameter, referTypeParameter, x_IUDParameter);
        }
    
        public virtual ObjectResult<P_BankbookMonthPvt_Result> P_BankbookMonthPvt(Nullable<int> tenantId, Nullable<int> startYM, Nullable<int> endYM)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var startYMParameter = startYM.HasValue ?
                new ObjectParameter("StartYM", startYM) :
                new ObjectParameter("StartYM", typeof(int));
    
            var endYMParameter = endYM.HasValue ?
                new ObjectParameter("EndYM", endYM) :
                new ObjectParameter("EndYM", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<P_BankbookMonthPvt_Result>("P_BankbookMonthPvt", tenantIdParameter, startYMParameter, endYMParameter);
        }
    
        public virtual int P_ComeinChange(Nullable<int> tenantId, Nullable<System.Guid> comeinId, Nullable<System.Guid> partnerId, string currencyNo, Nullable<int> comeinStatus)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var comeinIdParameter = comeinId.HasValue ?
                new ObjectParameter("ComeinId", comeinId) :
                new ObjectParameter("ComeinId", typeof(System.Guid));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(System.Guid));
    
            var currencyNoParameter = currencyNo != null ?
                new ObjectParameter("CurrencyNo", currencyNo) :
                new ObjectParameter("CurrencyNo", typeof(string));
    
            var comeinStatusParameter = comeinStatus.HasValue ?
                new ObjectParameter("ComeinStatus", comeinStatus) :
                new ObjectParameter("ComeinStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_ComeinChange", tenantIdParameter, comeinIdParameter, partnerIdParameter, currencyNoParameter, comeinStatusParameter);
        }
    
        public virtual int P_ComeinChkYM(Nullable<int> tenantKey, Nullable<int> belongYM, Nullable<int> comeinYMType, Nullable<System.Guid> userId, ObjectParameter retValue, ObjectParameter retMsg)
        {
            var tenantKeyParameter = tenantKey.HasValue ?
                new ObjectParameter("TenantKey", tenantKey) :
                new ObjectParameter("TenantKey", typeof(int));
    
            var belongYMParameter = belongYM.HasValue ?
                new ObjectParameter("BelongYM", belongYM) :
                new ObjectParameter("BelongYM", typeof(int));
    
            var comeinYMTypeParameter = comeinYMType.HasValue ?
                new ObjectParameter("ComeinYMType", comeinYMType) :
                new ObjectParameter("ComeinYMType", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_ComeinChkYM", tenantKeyParameter, belongYMParameter, comeinYMTypeParameter, userIdParameter, retValue, retMsg);
        }
    
        public virtual int P_ComeinClearing(Nullable<int> tenantKey, Nullable<int> belongYM, Nullable<int> comeinYMType, Nullable<System.Guid> partnerId, Nullable<System.Guid> userId, ObjectParameter retValue, ObjectParameter retMsg)
        {
            var tenantKeyParameter = tenantKey.HasValue ?
                new ObjectParameter("TenantKey", tenantKey) :
                new ObjectParameter("TenantKey", typeof(int));
    
            var belongYMParameter = belongYM.HasValue ?
                new ObjectParameter("BelongYM", belongYM) :
                new ObjectParameter("BelongYM", typeof(int));
    
            var comeinYMTypeParameter = comeinYMType.HasValue ?
                new ObjectParameter("ComeinYMType", comeinYMType) :
                new ObjectParameter("ComeinYMType", typeof(int));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(System.Guid));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_ComeinClearing", tenantKeyParameter, belongYMParameter, comeinYMTypeParameter, partnerIdParameter, userIdParameter, retValue, retMsg);
        }
    
        public virtual int P_ComeinItemChange(Nullable<int> tenantId, Nullable<System.Guid> comeinId, Nullable<System.Guid> comeinItemId, Nullable<System.Guid> purchaseItemId, Nullable<System.Guid> assetsId, Nullable<System.Guid> storehouseId, string x_IUD)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var comeinIdParameter = comeinId.HasValue ?
                new ObjectParameter("ComeinId", comeinId) :
                new ObjectParameter("ComeinId", typeof(System.Guid));
    
            var comeinItemIdParameter = comeinItemId.HasValue ?
                new ObjectParameter("ComeinItemId", comeinItemId) :
                new ObjectParameter("ComeinItemId", typeof(System.Guid));
    
            var purchaseItemIdParameter = purchaseItemId.HasValue ?
                new ObjectParameter("PurchaseItemId", purchaseItemId) :
                new ObjectParameter("PurchaseItemId", typeof(System.Guid));
    
            var assetsIdParameter = assetsId.HasValue ?
                new ObjectParameter("AssetsId", assetsId) :
                new ObjectParameter("AssetsId", typeof(System.Guid));
    
            var storehouseIdParameter = storehouseId.HasValue ?
                new ObjectParameter("StorehouseId", storehouseId) :
                new ObjectParameter("StorehouseId", typeof(System.Guid));
    
            var x_IUDParameter = x_IUD != null ?
                new ObjectParameter("X_IUD", x_IUD) :
                new ObjectParameter("X_IUD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_ComeinItemChange", tenantIdParameter, comeinIdParameter, comeinItemIdParameter, purchaseItemIdParameter, assetsIdParameter, storehouseIdParameter, x_IUDParameter);
        }
    
        public virtual int P_ComeinsToProductStore_UPD(Nullable<System.Guid> idKeyComeinId, Nullable<System.Guid> idKey_ComeinItemId, string x_IUD, Nullable<decimal> updateQty)
        {
            var idKeyComeinIdParameter = idKeyComeinId.HasValue ?
                new ObjectParameter("IdKeyComeinId", idKeyComeinId) :
                new ObjectParameter("IdKeyComeinId", typeof(System.Guid));
    
            var idKey_ComeinItemIdParameter = idKey_ComeinItemId.HasValue ?
                new ObjectParameter("IdKey_ComeinItemId", idKey_ComeinItemId) :
                new ObjectParameter("IdKey_ComeinItemId", typeof(System.Guid));
    
            var x_IUDParameter = x_IUD != null ?
                new ObjectParameter("X_IUD", x_IUD) :
                new ObjectParameter("X_IUD", typeof(string));
    
            var updateQtyParameter = updateQty.HasValue ?
                new ObjectParameter("UpdateQty", updateQty) :
                new ObjectParameter("UpdateQty", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_ComeinsToProductStore_UPD", idKeyComeinIdParameter, idKey_ComeinItemIdParameter, x_IUDParameter, updateQtyParameter);
        }
    
        public virtual int P_ComeinTotal(Nullable<System.Guid> idKey, Nullable<int> tenantId)
        {
            var idKeyParameter = idKey.HasValue ?
                new ObjectParameter("IdKey", idKey) :
                new ObjectParameter("IdKey", typeof(System.Guid));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_ComeinTotal", idKeyParameter, tenantIdParameter);
        }
    
        public virtual int P_EmployeeSalaryChkYM(Nullable<int> tenantKey, Nullable<int> belongYM, Nullable<decimal> workDays)
        {
            var tenantKeyParameter = tenantKey.HasValue ?
                new ObjectParameter("TenantKey", tenantKey) :
                new ObjectParameter("TenantKey", typeof(int));
    
            var belongYMParameter = belongYM.HasValue ?
                new ObjectParameter("BelongYM", belongYM) :
                new ObjectParameter("BelongYM", typeof(int));
    
            var workDaysParameter = workDays.HasValue ?
                new ObjectParameter("WorkDays", workDays) :
                new ObjectParameter("WorkDays", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_EmployeeSalaryChkYM", tenantKeyParameter, belongYMParameter, workDaysParameter);
        }
    
        public virtual int P_ErrorNote(Nullable<int> tenantId, Nullable<System.Guid> keyId, Nullable<int> voucherTypeId, string tableName, string remark)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var keyIdParameter = keyId.HasValue ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(System.Guid));
    
            var voucherTypeIdParameter = voucherTypeId.HasValue ?
                new ObjectParameter("VoucherTypeId", voucherTypeId) :
                new ObjectParameter("VoucherTypeId", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_ErrorNote", tenantIdParameter, keyIdParameter, voucherTypeIdParameter, tableNameParameter, remarkParameter);
        }
    
        public virtual int P_GetCurrencyDec(Nullable<int> tenantId, string currencyNo, ObjectParameter priceDec, ObjectParameter subtotalDec, ObjectParameter taxDec, ObjectParameter totalDec)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var currencyNoParameter = currencyNo != null ?
                new ObjectParameter("CurrencyNo", currencyNo) :
                new ObjectParameter("CurrencyNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_GetCurrencyDec", tenantIdParameter, currencyNoParameter, priceDec, subtotalDec, taxDec, totalDec);
        }
    
        public virtual int P_GetPartnerDiscountPrice(Nullable<int> tenantId, Nullable<System.Guid> assetsId, Nullable<System.Guid> partnerId, string currencyNo, Nullable<decimal> currencyExchangeRate, Nullable<decimal> listPrice, Nullable<decimal> discounts, Nullable<int> partnerMode, Nullable<System.DateTime> vDate, Nullable<int> taxNo, Nullable<decimal> taxRate, ObjectParameter price)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var assetsIdParameter = assetsId.HasValue ?
                new ObjectParameter("AssetsId", assetsId) :
                new ObjectParameter("AssetsId", typeof(System.Guid));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(System.Guid));
    
            var currencyNoParameter = currencyNo != null ?
                new ObjectParameter("CurrencyNo", currencyNo) :
                new ObjectParameter("CurrencyNo", typeof(string));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var discountsParameter = discounts.HasValue ?
                new ObjectParameter("Discounts", discounts) :
                new ObjectParameter("Discounts", typeof(decimal));
    
            var partnerModeParameter = partnerMode.HasValue ?
                new ObjectParameter("PartnerMode", partnerMode) :
                new ObjectParameter("PartnerMode", typeof(int));
    
            var vDateParameter = vDate.HasValue ?
                new ObjectParameter("VDate", vDate) :
                new ObjectParameter("VDate", typeof(System.DateTime));
    
            var taxNoParameter = taxNo.HasValue ?
                new ObjectParameter("TaxNo", taxNo) :
                new ObjectParameter("TaxNo", typeof(int));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_GetPartnerDiscountPrice", tenantIdParameter, assetsIdParameter, partnerIdParameter, currencyNoParameter, currencyExchangeRateParameter, listPriceParameter, discountsParameter, partnerModeParameter, vDateParameter, taxNoParameter, taxRateParameter, price);
        }
    
        public virtual int P_GetPartnerProductPrice(Nullable<int> tenantId, Nullable<System.Guid> assetsId, Nullable<System.Guid> partnerId, string currencyNo, Nullable<decimal> currencyExchangeRate, Nullable<int> partnerMode, Nullable<System.DateTime> vDate, Nullable<decimal> discounts, Nullable<int> taxNo, Nullable<decimal> taxRate, ObjectParameter price)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var assetsIdParameter = assetsId.HasValue ?
                new ObjectParameter("AssetsId", assetsId) :
                new ObjectParameter("AssetsId", typeof(System.Guid));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(System.Guid));
    
            var currencyNoParameter = currencyNo != null ?
                new ObjectParameter("CurrencyNo", currencyNo) :
                new ObjectParameter("CurrencyNo", typeof(string));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var partnerModeParameter = partnerMode.HasValue ?
                new ObjectParameter("PartnerMode", partnerMode) :
                new ObjectParameter("PartnerMode", typeof(int));
    
            var vDateParameter = vDate.HasValue ?
                new ObjectParameter("VDate", vDate) :
                new ObjectParameter("VDate", typeof(System.DateTime));
    
            var discountsParameter = discounts.HasValue ?
                new ObjectParameter("Discounts", discounts) :
                new ObjectParameter("Discounts", typeof(decimal));
    
            var taxNoParameter = taxNo.HasValue ?
                new ObjectParameter("TaxNo", taxNo) :
                new ObjectParameter("TaxNo", typeof(int));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_GetPartnerProductPrice", tenantIdParameter, assetsIdParameter, partnerIdParameter, currencyNoParameter, currencyExchangeRateParameter, partnerModeParameter, vDateParameter, discountsParameter, taxNoParameter, taxRateParameter, price);
        }
    
        public virtual int P_GetProductPrice(Nullable<int> tenantId, Nullable<System.Guid> assetsId, Nullable<System.DateTime> sDate, string currencyNo, Nullable<decimal> currencyExchangeRate, Nullable<System.Guid> partnerId, Nullable<int> partnerMode, Nullable<decimal> listPrice, Nullable<decimal> discounts, Nullable<int> taxNo, Nullable<decimal> taxRate, ObjectParameter price)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var assetsIdParameter = assetsId.HasValue ?
                new ObjectParameter("AssetsId", assetsId) :
                new ObjectParameter("AssetsId", typeof(System.Guid));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("SDate", sDate) :
                new ObjectParameter("SDate", typeof(System.DateTime));
    
            var currencyNoParameter = currencyNo != null ?
                new ObjectParameter("CurrencyNo", currencyNo) :
                new ObjectParameter("CurrencyNo", typeof(string));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(System.Guid));
    
            var partnerModeParameter = partnerMode.HasValue ?
                new ObjectParameter("PartnerMode", partnerMode) :
                new ObjectParameter("PartnerMode", typeof(int));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var discountsParameter = discounts.HasValue ?
                new ObjectParameter("Discounts", discounts) :
                new ObjectParameter("Discounts", typeof(decimal));
    
            var taxNoParameter = taxNo.HasValue ?
                new ObjectParameter("TaxNo", taxNo) :
                new ObjectParameter("TaxNo", typeof(int));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_GetProductPrice", tenantIdParameter, assetsIdParameter, sDateParameter, currencyNoParameter, currencyExchangeRateParameter, partnerIdParameter, partnerModeParameter, listPriceParameter, discountsParameter, taxNoParameter, taxRateParameter, price);
        }
    
        public virtual ObjectResult<P_GetSalaryItemList_Result> P_GetSalaryItemList(Nullable<int> tenantId)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<P_GetSalaryItemList_Result>("P_GetSalaryItemList", tenantIdParameter);
        }
    
        public virtual ObjectResult<P_GetSalaryParameterList_Result> P_GetSalaryParameterList(Nullable<int> tenantId)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<P_GetSalaryParameterList_Result>("P_GetSalaryParameterList", tenantIdParameter);
        }
    
        public virtual int P_InOrderTotal(Nullable<System.Guid> idKey, Nullable<int> tenantId)
        {
            var idKeyParameter = idKey.HasValue ?
                new ObjectParameter("IdKey", idKey) :
                new ObjectParameter("IdKey", typeof(System.Guid));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_InOrderTotal", idKeyParameter, tenantIdParameter);
        }
    
        public virtual int P_Join2Product(Nullable<System.Guid> idKeyMaster, Nullable<System.Guid> idKeySec)
        {
            var idKeyMasterParameter = idKeyMaster.HasValue ?
                new ObjectParameter("IdKeyMaster", idKeyMaster) :
                new ObjectParameter("IdKeyMaster", typeof(System.Guid));
    
            var idKeySecParameter = idKeySec.HasValue ?
                new ObjectParameter("IdKeySec", idKeySec) :
                new ObjectParameter("IdKeySec", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Join2Product", idKeyMasterParameter, idKeySecParameter);
        }
    
        public virtual int P_OrderItemUpdateStatus(Nullable<System.Guid> idKey, Nullable<int> mType)
        {
            var idKeyParameter = idKey.HasValue ?
                new ObjectParameter("IdKey", idKey) :
                new ObjectParameter("IdKey", typeof(System.Guid));
    
            var mTypeParameter = mType.HasValue ?
                new ObjectParameter("mType", mType) :
                new ObjectParameter("mType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_OrderItemUpdateStatus", idKeyParameter, mTypeParameter);
        }
    
        public virtual int P_OrderTotal(Nullable<System.Guid> idKey, Nullable<int> tenantId)
        {
            var idKeyParameter = idKey.HasValue ?
                new ObjectParameter("IdKey", idKey) :
                new ObjectParameter("IdKey", typeof(System.Guid));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_OrderTotal", idKeyParameter, tenantIdParameter);
        }
    
        public virtual int P_PaymentUpdateReceiveMoney(Nullable<int> tenantId, Nullable<System.Guid> partnerId, Nullable<int> belongYM, Nullable<int> comeinYMType, string currencyNo)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(System.Guid));
    
            var belongYMParameter = belongYM.HasValue ?
                new ObjectParameter("BelongYM", belongYM) :
                new ObjectParameter("BelongYM", typeof(int));
    
            var comeinYMTypeParameter = comeinYMType.HasValue ?
                new ObjectParameter("ComeinYMType", comeinYMType) :
                new ObjectParameter("ComeinYMType", typeof(int));
    
            var currencyNoParameter = currencyNo != null ?
                new ObjectParameter("CurrencyNo", currencyNo) :
                new ObjectParameter("CurrencyNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_PaymentUpdateReceiveMoney", tenantIdParameter, partnerIdParameter, belongYMParameter, comeinYMTypeParameter, currencyNoParameter);
        }
    
        public virtual int P_ProductStoreItem_UPD(Nullable<int> tenantId, Nullable<System.Guid> storehouseId, Nullable<System.Guid> partnerId, Nullable<System.Guid> assetsId, Nullable<int> voucherTypeId, string itemListNote, string storeSpaceName, Nullable<System.DateTime> updateDate, Nullable<System.Guid> inOutId, Nullable<System.Guid> inOutItemId, Nullable<decimal> updateQty, string unit, Nullable<decimal> price, string currencyNo, Nullable<decimal> currencyExchangeRate, string x_IUD)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var storehouseIdParameter = storehouseId.HasValue ?
                new ObjectParameter("StorehouseId", storehouseId) :
                new ObjectParameter("StorehouseId", typeof(System.Guid));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(System.Guid));
    
            var assetsIdParameter = assetsId.HasValue ?
                new ObjectParameter("AssetsId", assetsId) :
                new ObjectParameter("AssetsId", typeof(System.Guid));
    
            var voucherTypeIdParameter = voucherTypeId.HasValue ?
                new ObjectParameter("VoucherTypeId", voucherTypeId) :
                new ObjectParameter("VoucherTypeId", typeof(int));
    
            var itemListNoteParameter = itemListNote != null ?
                new ObjectParameter("ItemListNote", itemListNote) :
                new ObjectParameter("ItemListNote", typeof(string));
    
            var storeSpaceNameParameter = storeSpaceName != null ?
                new ObjectParameter("StoreSpaceName", storeSpaceName) :
                new ObjectParameter("StoreSpaceName", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var inOutIdParameter = inOutId.HasValue ?
                new ObjectParameter("InOutId", inOutId) :
                new ObjectParameter("InOutId", typeof(System.Guid));
    
            var inOutItemIdParameter = inOutItemId.HasValue ?
                new ObjectParameter("InOutItemId", inOutItemId) :
                new ObjectParameter("InOutItemId", typeof(System.Guid));
    
            var updateQtyParameter = updateQty.HasValue ?
                new ObjectParameter("UpdateQty", updateQty) :
                new ObjectParameter("UpdateQty", typeof(decimal));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var currencyNoParameter = currencyNo != null ?
                new ObjectParameter("CurrencyNo", currencyNo) :
                new ObjectParameter("CurrencyNo", typeof(string));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var x_IUDParameter = x_IUD != null ?
                new ObjectParameter("X_IUD", x_IUD) :
                new ObjectParameter("X_IUD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_ProductStoreItem_UPD", tenantIdParameter, storehouseIdParameter, partnerIdParameter, assetsIdParameter, voucherTypeIdParameter, itemListNoteParameter, storeSpaceNameParameter, updateDateParameter, inOutIdParameter, inOutItemIdParameter, updateQtyParameter, unitParameter, priceParameter, currencyNoParameter, currencyExchangeRateParameter, x_IUDParameter);
        }
    
        public virtual int P_ProductStoreItemList(Nullable<int> tenantId, Nullable<System.Guid> storehouseId, Nullable<System.Guid> partnerId, Nullable<System.Guid> assetsId, Nullable<int> voucherTypeId, string itemListNote, string storeSpaceName, Nullable<System.DateTime> updateDate, Nullable<System.Guid> inOutId, Nullable<System.Guid> inOutItemId, Nullable<decimal> updateQty, string unit, Nullable<decimal> price, string currencyNo, Nullable<decimal> currencyExchangeRate, string x_IUD)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var storehouseIdParameter = storehouseId.HasValue ?
                new ObjectParameter("StorehouseId", storehouseId) :
                new ObjectParameter("StorehouseId", typeof(System.Guid));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(System.Guid));
    
            var assetsIdParameter = assetsId.HasValue ?
                new ObjectParameter("AssetsId", assetsId) :
                new ObjectParameter("AssetsId", typeof(System.Guid));
    
            var voucherTypeIdParameter = voucherTypeId.HasValue ?
                new ObjectParameter("VoucherTypeId", voucherTypeId) :
                new ObjectParameter("VoucherTypeId", typeof(int));
    
            var itemListNoteParameter = itemListNote != null ?
                new ObjectParameter("ItemListNote", itemListNote) :
                new ObjectParameter("ItemListNote", typeof(string));
    
            var storeSpaceNameParameter = storeSpaceName != null ?
                new ObjectParameter("StoreSpaceName", storeSpaceName) :
                new ObjectParameter("StoreSpaceName", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var inOutIdParameter = inOutId.HasValue ?
                new ObjectParameter("InOutId", inOutId) :
                new ObjectParameter("InOutId", typeof(System.Guid));
    
            var inOutItemIdParameter = inOutItemId.HasValue ?
                new ObjectParameter("InOutItemId", inOutItemId) :
                new ObjectParameter("InOutItemId", typeof(System.Guid));
    
            var updateQtyParameter = updateQty.HasValue ?
                new ObjectParameter("UpdateQty", updateQty) :
                new ObjectParameter("UpdateQty", typeof(decimal));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var currencyNoParameter = currencyNo != null ?
                new ObjectParameter("CurrencyNo", currencyNo) :
                new ObjectParameter("CurrencyNo", typeof(string));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var x_IUDParameter = x_IUD != null ?
                new ObjectParameter("X_IUD", x_IUD) :
                new ObjectParameter("X_IUD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_ProductStoreItemList", tenantIdParameter, storehouseIdParameter, partnerIdParameter, assetsIdParameter, voucherTypeIdParameter, itemListNoteParameter, storeSpaceNameParameter, updateDateParameter, inOutIdParameter, inOutItemIdParameter, updateQtyParameter, unitParameter, priceParameter, currencyNoParameter, currencyExchangeRateParameter, x_IUDParameter);
        }
    
        public virtual int P_ProductStoreItemlistReset(Nullable<int> nTenantId, Nullable<System.Guid> mAssetsId)
        {
            var nTenantIdParameter = nTenantId.HasValue ?
                new ObjectParameter("nTenantId", nTenantId) :
                new ObjectParameter("nTenantId", typeof(int));
    
            var mAssetsIdParameter = mAssetsId.HasValue ?
                new ObjectParameter("mAssetsId", mAssetsId) :
                new ObjectParameter("mAssetsId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_ProductStoreItemlistReset", nTenantIdParameter, mAssetsIdParameter);
        }
    
        public virtual int P_PurchaseItemUpdateStatus(Nullable<System.Guid> idKey, Nullable<int> mType)
        {
            var idKeyParameter = idKey.HasValue ?
                new ObjectParameter("IdKey", idKey) :
                new ObjectParameter("IdKey", typeof(System.Guid));
    
            var mTypeParameter = mType.HasValue ?
                new ObjectParameter("mType", mType) :
                new ObjectParameter("mType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_PurchaseItemUpdateStatus", idKeyParameter, mTypeParameter);
        }
    
        public virtual int P_PurchaseTotal(Nullable<System.Guid> idKey, Nullable<int> tenantId)
        {
            var idKeyParameter = idKey.HasValue ?
                new ObjectParameter("IdKey", idKey) :
                new ObjectParameter("IdKey", typeof(System.Guid));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_PurchaseTotal", idKeyParameter, tenantIdParameter);
        }
    
        public virtual int P_QuotationItemUpdateStatus(Nullable<System.Guid> idKey)
        {
            var idKeyParameter = idKey.HasValue ?
                new ObjectParameter("IdKey", idKey) :
                new ObjectParameter("IdKey", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_QuotationItemUpdateStatus", idKeyParameter);
        }
    
        public virtual int P_QuotationTotal(Nullable<System.Guid> idKey, Nullable<int> tenantId)
        {
            var idKeyParameter = idKey.HasValue ?
                new ObjectParameter("IdKey", idKey) :
                new ObjectParameter("IdKey", typeof(System.Guid));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_QuotationTotal", idKeyParameter, tenantIdParameter);
        }
    
        public virtual ObjectResult<P_QuotationTotalReport_Result> P_QuotationTotalReport(Nullable<int> tenantKey, Nullable<int> startValue, Nullable<int> endValue, Nullable<int> reportForm)
        {
            var tenantKeyParameter = tenantKey.HasValue ?
                new ObjectParameter("TenantKey", tenantKey) :
                new ObjectParameter("TenantKey", typeof(int));
    
            var startValueParameter = startValue.HasValue ?
                new ObjectParameter("StartValue", startValue) :
                new ObjectParameter("StartValue", typeof(int));
    
            var endValueParameter = endValue.HasValue ?
                new ObjectParameter("EndValue", endValue) :
                new ObjectParameter("EndValue", typeof(int));
    
            var reportFormParameter = reportForm.HasValue ?
                new ObjectParameter("ReportForm", reportForm) :
                new ObjectParameter("ReportForm", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<P_QuotationTotalReport_Result>("P_QuotationTotalReport", tenantKeyParameter, startValueParameter, endValueParameter, reportFormParameter);
        }
    
        public virtual int P_ReceivePaymentUpdateReceiveMoney(Nullable<int> tenantId, Nullable<System.Guid> partnerId, Nullable<int> belongYM, Nullable<int> salechkType, string currencyNo)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(System.Guid));
    
            var belongYMParameter = belongYM.HasValue ?
                new ObjectParameter("BelongYM", belongYM) :
                new ObjectParameter("BelongYM", typeof(int));
    
            var salechkTypeParameter = salechkType.HasValue ?
                new ObjectParameter("SalechkType", salechkType) :
                new ObjectParameter("SalechkType", typeof(int));
    
            var currencyNoParameter = currencyNo != null ?
                new ObjectParameter("CurrencyNo", currencyNo) :
                new ObjectParameter("CurrencyNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_ReceivePaymentUpdateReceiveMoney", tenantIdParameter, partnerIdParameter, belongYMParameter, salechkTypeParameter, currencyNoParameter);
        }
    
        public virtual int P_RequisitionItemUpdateStatus(Nullable<System.Guid> idKey)
        {
            var idKeyParameter = idKey.HasValue ?
                new ObjectParameter("IdKey", idKey) :
                new ObjectParameter("IdKey", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_RequisitionItemUpdateStatus", idKeyParameter);
        }
    
        public virtual int P_RequisitionTotal(Nullable<System.Guid> idKey, Nullable<int> tenantId)
        {
            var idKeyParameter = idKey.HasValue ?
                new ObjectParameter("IdKey", idKey) :
                new ObjectParameter("IdKey", typeof(System.Guid));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_RequisitionTotal", idKeyParameter, tenantIdParameter);
        }
    
        public virtual int P_SaleChkYM(Nullable<int> tenantKey, Nullable<int> belongYM, Nullable<int> salechkType, Nullable<System.Guid> userId, ObjectParameter retValue, ObjectParameter retMsg)
        {
            var tenantKeyParameter = tenantKey.HasValue ?
                new ObjectParameter("TenantKey", tenantKey) :
                new ObjectParameter("TenantKey", typeof(int));
    
            var belongYMParameter = belongYM.HasValue ?
                new ObjectParameter("BelongYM", belongYM) :
                new ObjectParameter("BelongYM", typeof(int));
    
            var salechkTypeParameter = salechkType.HasValue ?
                new ObjectParameter("SalechkType", salechkType) :
                new ObjectParameter("SalechkType", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_SaleChkYM", tenantKeyParameter, belongYMParameter, salechkTypeParameter, userIdParameter, retValue, retMsg);
        }
    
        public virtual int P_SaleClearing(Nullable<int> tenantKey, Nullable<int> belongYM, Nullable<int> salechkType, Nullable<System.Guid> partnerId, Nullable<System.Guid> userId, ObjectParameter retValue, ObjectParameter retMsg)
        {
            var tenantKeyParameter = tenantKey.HasValue ?
                new ObjectParameter("TenantKey", tenantKey) :
                new ObjectParameter("TenantKey", typeof(int));
    
            var belongYMParameter = belongYM.HasValue ?
                new ObjectParameter("BelongYM", belongYM) :
                new ObjectParameter("BelongYM", typeof(int));
    
            var salechkTypeParameter = salechkType.HasValue ?
                new ObjectParameter("SalechkType", salechkType) :
                new ObjectParameter("SalechkType", typeof(int));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(System.Guid));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_SaleClearing", tenantKeyParameter, belongYMParameter, salechkTypeParameter, partnerIdParameter, userIdParameter, retValue, retMsg);
        }
    
        public virtual int P_SaleDepositUpdate(Nullable<int> tenantId, Nullable<System.Guid> partnerId)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_SaleDepositUpdate", tenantIdParameter, partnerIdParameter);
        }
    
        public virtual int P_SaleItemChange(Nullable<int> tenantId, Nullable<System.Guid> saleId, Nullable<System.Guid> saleItemId, Nullable<System.Guid> orderItemId, Nullable<System.Guid> assetsId, Nullable<System.Guid> storehouseId, string x_IUD)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var saleIdParameter = saleId.HasValue ?
                new ObjectParameter("SaleId", saleId) :
                new ObjectParameter("SaleId", typeof(System.Guid));
    
            var saleItemIdParameter = saleItemId.HasValue ?
                new ObjectParameter("SaleItemId", saleItemId) :
                new ObjectParameter("SaleItemId", typeof(System.Guid));
    
            var orderItemIdParameter = orderItemId.HasValue ?
                new ObjectParameter("OrderItemId", orderItemId) :
                new ObjectParameter("OrderItemId", typeof(System.Guid));
    
            var assetsIdParameter = assetsId.HasValue ?
                new ObjectParameter("AssetsId", assetsId) :
                new ObjectParameter("AssetsId", typeof(System.Guid));
    
            var storehouseIdParameter = storehouseId.HasValue ?
                new ObjectParameter("StorehouseId", storehouseId) :
                new ObjectParameter("StorehouseId", typeof(System.Guid));
    
            var x_IUDParameter = x_IUD != null ?
                new ObjectParameter("X_IUD", x_IUD) :
                new ObjectParameter("X_IUD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_SaleItemChange", tenantIdParameter, saleIdParameter, saleItemIdParameter, orderItemIdParameter, assetsIdParameter, storehouseIdParameter, x_IUDParameter);
        }
    
        public virtual int P_SaleItems_Update(Nullable<int> tenantId, Nullable<System.Guid> saleId, Nullable<System.Guid> saleItemId, string x_IUD)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var saleIdParameter = saleId.HasValue ?
                new ObjectParameter("SaleId", saleId) :
                new ObjectParameter("SaleId", typeof(System.Guid));
    
            var saleItemIdParameter = saleItemId.HasValue ?
                new ObjectParameter("SaleItemId", saleItemId) :
                new ObjectParameter("SaleItemId", typeof(System.Guid));
    
            var x_IUDParameter = x_IUD != null ?
                new ObjectParameter("X_IUD", x_IUD) :
                new ObjectParameter("X_IUD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_SaleItems_Update", tenantIdParameter, saleIdParameter, saleItemIdParameter, x_IUDParameter);
        }
    
        public virtual int P_SaleItemsCommission(Nullable<int> tenantId, Nullable<System.Guid> saleItemId, Nullable<System.Guid> partnerId, Nullable<System.Guid> assetsId, Nullable<decimal> price, Nullable<decimal> qty, string currencyNo, Nullable<decimal> currencyExchangeRate, Nullable<System.DateTime> vDate, Nullable<decimal> discounts)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var saleItemIdParameter = saleItemId.HasValue ?
                new ObjectParameter("SaleItemId", saleItemId) :
                new ObjectParameter("SaleItemId", typeof(System.Guid));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(System.Guid));
    
            var assetsIdParameter = assetsId.HasValue ?
                new ObjectParameter("AssetsId", assetsId) :
                new ObjectParameter("AssetsId", typeof(System.Guid));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var currencyNoParameter = currencyNo != null ?
                new ObjectParameter("CurrencyNo", currencyNo) :
                new ObjectParameter("CurrencyNo", typeof(string));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var vDateParameter = vDate.HasValue ?
                new ObjectParameter("VDate", vDate) :
                new ObjectParameter("VDate", typeof(System.DateTime));
    
            var discountsParameter = discounts.HasValue ?
                new ObjectParameter("Discounts", discounts) :
                new ObjectParameter("Discounts", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_SaleItemsCommission", tenantIdParameter, saleItemIdParameter, partnerIdParameter, assetsIdParameter, priceParameter, qtyParameter, currencyNoParameter, currencyExchangeRateParameter, vDateParameter, discountsParameter);
        }
    
        public virtual int P_SalesChange(Nullable<int> tenantId, Nullable<System.Guid> saleId)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var saleIdParameter = saleId.HasValue ?
                new ObjectParameter("SaleId", saleId) :
                new ObjectParameter("SaleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_SalesChange", tenantIdParameter, saleIdParameter);
        }
    
        public virtual int P_SalesTotal(Nullable<System.Guid> idKey, Nullable<int> tenantId)
        {
            var idKeyParameter = idKey.HasValue ?
                new ObjectParameter("IdKey", idKey) :
                new ObjectParameter("IdKey", typeof(System.Guid));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_SalesTotal", idKeyParameter, tenantIdParameter);
        }
    
        public virtual int P_TaxCalculate(Nullable<int> tenantId, Nullable<int> taxNo, Nullable<decimal> taxRate, string currencyNo, ObjectParameter subtotal, ObjectParameter tax, ObjectParameter total)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var taxNoParameter = taxNo.HasValue ?
                new ObjectParameter("TaxNo", taxNo) :
                new ObjectParameter("TaxNo", typeof(int));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            var currencyNoParameter = currencyNo != null ?
                new ObjectParameter("CurrencyNo", currencyNo) :
                new ObjectParameter("CurrencyNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_TaxCalculate", tenantIdParameter, taxNoParameter, taxRateParameter, currencyNoParameter, subtotal, tax, total);
        }
    
        public virtual int P_TestDataInsert(Nullable<int> tenantId, Nullable<System.Guid> keyId, Nullable<int> voucherTypeId, string tableName, string processName, Nullable<int> lineNo, Nullable<int> errorNo, string errorMessage, string remark)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var keyIdParameter = keyId.HasValue ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(System.Guid));
    
            var voucherTypeIdParameter = voucherTypeId.HasValue ?
                new ObjectParameter("VoucherTypeId", voucherTypeId) :
                new ObjectParameter("VoucherTypeId", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var processNameParameter = processName != null ?
                new ObjectParameter("ProcessName", processName) :
                new ObjectParameter("ProcessName", typeof(string));
    
            var lineNoParameter = lineNo.HasValue ?
                new ObjectParameter("LineNo", lineNo) :
                new ObjectParameter("LineNo", typeof(int));
    
            var errorNoParameter = errorNo.HasValue ?
                new ObjectParameter("ErrorNo", errorNo) :
                new ObjectParameter("ErrorNo", typeof(int));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_TestDataInsert", tenantIdParameter, keyIdParameter, voucherTypeIdParameter, tableNameParameter, processNameParameter, lineNoParameter, errorNoParameter, errorMessageParameter, remarkParameter);
        }
    
        public virtual ObjectResult<P_UpdWorkOrderItems_Result> P_UpdWorkOrderItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<P_UpdWorkOrderItems_Result>("P_UpdWorkOrderItems");
        }
    
        public virtual ObjectResult<P_WorkProgress_Result> P_WorkProgress(Nullable<int> tenantKey, string productType)
        {
            var tenantKeyParameter = tenantKey.HasValue ?
                new ObjectParameter("TenantKey", tenantKey) :
                new ObjectParameter("TenantKey", typeof(int));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<P_WorkProgress_Result>("P_WorkProgress", tenantKeyParameter, productTypeParameter);
        }
    
        public virtual int P_WorkProgressClearing(Nullable<int> tenantKey, Nullable<System.Guid> workOrderId, ObjectParameter retMsg, ObjectParameter retValue)
        {
            var tenantKeyParameter = tenantKey.HasValue ?
                new ObjectParameter("TenantKey", tenantKey) :
                new ObjectParameter("TenantKey", typeof(int));
    
            var workOrderIdParameter = workOrderId.HasValue ?
                new ObjectParameter("WorkOrderId", workOrderId) :
                new ObjectParameter("WorkOrderId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_WorkProgressClearing", tenantKeyParameter, workOrderIdParameter, retMsg, retValue);
        }
    
        public virtual ObjectResult<PRP_Sales_Result> PRP_Sales(Nullable<System.Guid> saleId)
        {
            var saleIdParameter = saleId.HasValue ?
                new ObjectParameter("SaleId", saleId) :
                new ObjectParameter("SaleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRP_Sales_Result>("PRP_Sales", saleIdParameter);
        }
    
        public virtual int PRP_Temp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PRP_Temp");
        }
    
        public virtual int PUD_AccuracyTapCopy(Nullable<int> standardNo, string sPName, string tPName, Nullable<decimal> priceRate, string sPChar, string tPChar)
        {
            var standardNoParameter = standardNo.HasValue ?
                new ObjectParameter("StandardNo", standardNo) :
                new ObjectParameter("StandardNo", typeof(int));
    
            var sPNameParameter = sPName != null ?
                new ObjectParameter("SPName", sPName) :
                new ObjectParameter("SPName", typeof(string));
    
            var tPNameParameter = tPName != null ?
                new ObjectParameter("TPName", tPName) :
                new ObjectParameter("TPName", typeof(string));
    
            var priceRateParameter = priceRate.HasValue ?
                new ObjectParameter("PriceRate", priceRate) :
                new ObjectParameter("PriceRate", typeof(decimal));
    
            var sPCharParameter = sPChar != null ?
                new ObjectParameter("SPChar", sPChar) :
                new ObjectParameter("SPChar", typeof(string));
    
            var tPCharParameter = tPChar != null ?
                new ObjectParameter("TPChar", tPChar) :
                new ObjectParameter("TPChar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PUD_AccuracyTapCopy", standardNoParameter, sPNameParameter, tPNameParameter, priceRateParameter, sPCharParameter, tPCharParameter);
        }
    
        public virtual int PUD_DeleteTenantAllData(Nullable<int> tenantId, string chkPara, Nullable<int> runMode)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var chkParaParameter = chkPara != null ?
                new ObjectParameter("ChkPara", chkPara) :
                new ObjectParameter("ChkPara", typeof(string));
    
            var runModeParameter = runMode.HasValue ?
                new ObjectParameter("RunMode", runMode) :
                new ObjectParameter("RunMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PUD_DeleteTenantAllData", tenantIdParameter, chkParaParameter, runModeParameter);
        }
    
        public virtual int PUD_ImportPiscm(string chkPara)
        {
            var chkParaParameter = chkPara != null ?
                new ObjectParameter("ChkPara", chkPara) :
                new ObjectParameter("ChkPara", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PUD_ImportPiscm", chkParaParameter);
        }
    
        public virtual int PUD_ProductAccuracyCopy(Nullable<int> tenantId, Nullable<int> standardNo, string assetsName, Nullable<System.Guid> assetsCategoryId, ObjectParameter insertQty)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var standardNoParameter = standardNo.HasValue ?
                new ObjectParameter("StandardNo", standardNo) :
                new ObjectParameter("StandardNo", typeof(int));
    
            var assetsNameParameter = assetsName != null ?
                new ObjectParameter("AssetsName", assetsName) :
                new ObjectParameter("AssetsName", typeof(string));
    
            var assetsCategoryIdParameter = assetsCategoryId.HasValue ?
                new ObjectParameter("AssetsCategoryId", assetsCategoryId) :
                new ObjectParameter("AssetsCategoryId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PUD_ProductAccuracyCopy", tenantIdParameter, standardNoParameter, assetsNameParameter, assetsCategoryIdParameter, insertQty);
        }
    
        public virtual int PUD_ProductPriceSet(Nullable<int> tenantId, Nullable<System.Guid> assetsCategoryId, Nullable<System.Guid> assetsId, Nullable<System.DateTime> startDate, string currencyNo, Nullable<decimal> currencyExchangeRate, Nullable<bool> runMode, Nullable<System.Guid> updateUserId, ObjectParameter insertQty)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var assetsCategoryIdParameter = assetsCategoryId.HasValue ?
                new ObjectParameter("AssetsCategoryId", assetsCategoryId) :
                new ObjectParameter("AssetsCategoryId", typeof(System.Guid));
    
            var assetsIdParameter = assetsId.HasValue ?
                new ObjectParameter("AssetsId", assetsId) :
                new ObjectParameter("AssetsId", typeof(System.Guid));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var currencyNoParameter = currencyNo != null ?
                new ObjectParameter("CurrencyNo", currencyNo) :
                new ObjectParameter("CurrencyNo", typeof(string));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var runModeParameter = runMode.HasValue ?
                new ObjectParameter("RunMode", runMode) :
                new ObjectParameter("RunMode", typeof(bool));
    
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PUD_ProductPriceSet", tenantIdParameter, assetsCategoryIdParameter, assetsIdParameter, startDateParameter, currencyNoParameter, currencyExchangeRateParameter, runModeParameter, updateUserIdParameter, insertQty);
        }
    
        public virtual int PUD_SaleBelongYM(Nullable<int> tenantId, Nullable<int> year, Nullable<int> month)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PUD_SaleBelongYM", tenantIdParameter, yearParameter, monthParameter);
        }
    
        public virtual int PUD_UpdateProductCategory(Nullable<int> tenantId, string startProductNo, string endProductNo, string productName, Nullable<System.Guid> oldCategoryId, Nullable<System.Guid> newCategoryId, ObjectParameter insertQty)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var startProductNoParameter = startProductNo != null ?
                new ObjectParameter("StartProductNo", startProductNo) :
                new ObjectParameter("StartProductNo", typeof(string));
    
            var endProductNoParameter = endProductNo != null ?
                new ObjectParameter("EndProductNo", endProductNo) :
                new ObjectParameter("EndProductNo", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var oldCategoryIdParameter = oldCategoryId.HasValue ?
                new ObjectParameter("OldCategoryId", oldCategoryId) :
                new ObjectParameter("OldCategoryId", typeof(System.Guid));
    
            var newCategoryIdParameter = newCategoryId.HasValue ?
                new ObjectParameter("NewCategoryId", newCategoryId) :
                new ObjectParameter("NewCategoryId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PUD_UpdateProductCategory", tenantIdParameter, startProductNoParameter, endProductNoParameter, productNameParameter, oldCategoryIdParameter, newCategoryIdParameter, insertQty);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
